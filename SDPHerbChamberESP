#include <time.h>
#include "ets_sys.h"
#include "osapi.h"
#include "gpio.h"
#include "os_type.h"
#include "user_config.h"
#include "user_interface.h"
#include "cont.h"

#include <DHT.h>
#include <DHT_U.h>

#include "FirebaseESP8266.h"  // Install Firebase ESP8266 library
#include <ESP8266WiFi.h>


#define ON 1
#define OFF 0

#define FIREBASE_HOST "sdp21-4b787.firebaseio.com/" //Without http:// or https:// schemes
#define FIREBASE_AUTH "Vw8ZlF4gKtPxfs4i0K7EWKMSVJpP6yvZFVWCwR2l"  
#define WIFI_SSID "nam1plus"
#define WIFI_PASSWORD "Tinkhung123!"

static const uint8_t D0   = 16;
static const uint8_t D1   = 5;
static const uint8_t D2   = 4;
static const uint8_t D3   = 0;
static const uint8_t D4   = 2;
static const uint8_t D5   = 14;
static const uint8_t D6   = 12;
static const uint8_t D7   = 13;
static const uint8_t D8   = 15;
static const uint8_t D9   = 3;
static const uint8_t D10  = 1;

// Relay Control Pins

const int RLY_NUTRIENTS   = -1;
const int RLY_VALVE1      = D2;
const int RLY_VALVE2      = D3;
const int RLY_VALVE3      = D4;
const int RLY_VALVE4      = D5;
const int RLY_PUMP        = D6;
const int RLY_FANS        = D7;
const int RLY_LIGHT       = D8;



// Analog Sensor Pins
const int MUX_PIN1 = D0;
const int MUX_PIN2 = D1;

const int DHT_PIN = D10;



// Constants

const int waterTime = 5;          //should be 28
const int nutrientTime = 5;

const int moistureThreshold = 25;
const int tempThreshold = 80;

const int minMoisture = 250;
const int maxMoisture = 700;

const int inputProcessInterval = 10;



// Timers

static os_timer_t main_timer;
static os_timer_t delay_timer;

static void main_timer_handler(void *prv);
static void delay_timer_handler(void *prv);


DHT dht(DHT_PIN, DHT11);

FirebaseData firebaseData; //Define FirebaseESP8266 data object


void setup() {


  
  ESP.wdtDisable(); 

  // ESP connect to WIFI
  
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();
  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);


  // GPIO initialization
    
  gpio_init(); // init gpio subsytem



//  pinMode(SENSOR_MOISTURE1, INPUT);
//  pinMode(SENSOR_MOISTURE2, INPUT);
//  pinMode(SENSOR_MOISTURE3, INPUT);
//  pinMode(SENSOR_MOISTURE4, INPUT);

  pinMode2(RLY_PUMP, OUTPUT);
  pinMode2(RLY_FANS, OUTPUT);
  pinMode2(RLY_LIGHT, OUTPUT);
  pinMode2(RLY_VALVE1, OUTPUT);
  pinMode2(RLY_VALVE2, OUTPUT);
  pinMode2(RLY_VALVE3, OUTPUT);
  pinMode2(RLY_VALVE4, OUTPUT);
  pinMode2(LED_BUILTIN, OUTPUT);

  digitalWrite2(RLY_PUMP, LOW);
  digitalWrite2(RLY_FANS, LOW);
  digitalWrite2(RLY_NUTRIENTS, LOW);
  digitalWrite2(RLY_LIGHT, LOW);
  digitalWrite2(RLY_VALVE1, LOW);
  digitalWrite2(RLY_VALVE2, LOW);
  digitalWrite2(RLY_VALVE3, LOW);
  digitalWrite2(RLY_VALVE4, LOW);


  
  dht.begin();                  //DHT Sensor
  Serial.begin(9600);
  
  Serial.println("Starting up");
  statusBlink(15);

  digitalWrite2(RLY_LIGHT, HIGH);


  initialTest();

  // Loop timer
  os_timer_setfn(&main_timer, (os_timer_func_t *)main_timer_handler, NULL);
  os_timer_arm(&main_timer, inputProcessInterval*1000, 0);

}

void statusBlink(int num){
  for(int i = 0; i < num; i++){
    digitalWrite(LED_BUILTIN, HIGH);
    delay(1000);
    digitalWrite(LED_BUILTIN, LOW);  
    delay(1000);
  }
}

void loop() {}



void main_timer_handler(void *prv){

  
  digitalWrite2(MUX_PIN1, LOW);
  digitalWrite2(MUX_PIN2, LOW);
  delay2(100);
  int ma1 = analogRead2(); 

  
  digitalWrite2(MUX_PIN1, HIGH);
  digitalWrite2(MUX_PIN2, LOW);
  delay2(100);
  int ma2 = analogRead2();

  
  digitalWrite2(MUX_PIN1, HIGH);
  digitalWrite2(MUX_PIN2, LOW);
  delay2(100);
  int ma3 = analogRead2();

  
  digitalWrite2(MUX_PIN1, HIGH);
  digitalWrite2(MUX_PIN2, HIGH);
  delay2(100);
  int ma4 = analogRead2();
  
  double temp = dht.readTemperature(true);
  double humid = dht.readHumidity();

  if (isnan(temp) || isnan(humid)) {
     Serial.println("Failed to read from DHT sensor");
     temp = -1;
     humid = -1;
  }
  

  
  int m1 = map(ma1, maxMoisture, minMoisture, 0, 100)-20;
  int m2 = map(ma2, maxMoisture, minMoisture, 0, 100)-5;
  int m3 = map(ma3, maxMoisture, minMoisture, 0, 100)-29;
  int m4 = map(ma4, maxMoisture, minMoisture, 0, 100)-52;


  // Make decisions based on threshold

  if(m1 < moistureThreshold){
    Serial.println("Running water pump 1");
    delay2(1000);
    runWaterPump(1);
  }

  if(m2 < moistureThreshold){
    Serial.println("Running water pump 2");
    delay2(1000);
    runWaterPump(2);
  }

  if(m3 < moistureThreshold){
    Serial.println("Running water pump 3");
    delay2(1000);
    runWaterPump(3);
  }

  if(m4 < moistureThreshold){
    Serial.println("Running water pump 4");
    delay2(1000);
    runWaterPump(4);
  }

  if(temp < tempThreshold){
    digitalWrite2(RLY_FANS, HIGH);
  }
  else{
    digitalWrite2(RLY_FANS, LOW);
  }


  String humid1 =(String)humid;
  String temp1 = (String)temp;
  String moisture1 =(String)m1;
  String moisture2 = (String)m2;
  String moisture3 =(String)m3;
  String moisture4 = (String)m4;
  
  String serialOut = "| " + humid1 + " | " + temp1 + " | " + m1 + "  " + m2 + "  " + m3 + "  " + m4 + "                   ";

  Serial.println(serialOut);

  
  os_timer_disarm(&main_timer);
  os_timer_arm(&main_timer, 1000, 0);

}



void runWaterPump(int bedNumber){
  
  selectValve(bedNumber);
  
  digitalWrite2(RLY_PUMP, HIGH);
  delay2(waterTime*1000);
  digitalWrite2(RLY_PUMP, LOW);
  selectValve(-1);
  
}


void selectValve(int valveNum){
  
  int selectedValve = RLY_VALVE1 + (valveNum-1);

  
  digitalWrite2(RLY_VALVE1, LOW);
  digitalWrite2(RLY_VALVE2, LOW);
  digitalWrite2(RLY_VALVE3, LOW);
  digitalWrite2(RLY_VALVE4, LOW);
  
  digitalWrite2(selectedValve, HIGH);

}


void initialTest(){

  
  digitalWrite2(RLY_PUMP, LOW);
  digitalWrite2(RLY_FANS, LOW);
  digitalWrite2(RLY_NUTRIENTS, LOW);
  digitalWrite2(RLY_LIGHT, LOW);
  digitalWrite2(RLY_VALVE1, LOW);
  digitalWrite2(RLY_VALVE2, LOW);
  digitalWrite2(RLY_VALVE3, LOW);
  digitalWrite2(RLY_VALVE4, LOW);

  
  Serial.println("Starting tests");

  Serial.println("Test 1");

  Serial.println("Pump On");
  digitalWrite2(RLY_PUMP, HIGH);
  delay2(2000);
  Serial.println("Pump Off");
  digitalWrite2(RLY_PUMP, LOW);
  delay2(3000);

  Serial.println();
  
  Serial.println("Valve 1 On");
  digitalWrite2(RLY_VALVE1, HIGH);
  delay2(2000);
  Serial.println("Valve 1 Off");
  digitalWrite2(RLY_VALVE1, LOW);
  delay(3000);



  Serial.println();
  
  Serial.println("Valve 2 On");
  digitalWrite2(RLY_VALVE2, HIGH);
  delay2(2000);
  Serial.println("Valve 2 Off");
  digitalWrite2(RLY_VALVE2, LOW);
  delay2(3000);

  
  Serial.println();
  
  Serial.println("Valve 3 On");
  digitalWrite2(RLY_VALVE3, HIGH);
  delay2(2000);
  Serial.println("Valve 3 Off");
  digitalWrite2(RLY_VALVE3, LOW);
  delay2(3000);


  
  Serial.println();
  
  Serial.println("Valve 4 On");
  digitalWrite2(RLY_VALVE4, HIGH);
  delay2(2000);
  Serial.println("Valve 4 Off");
  digitalWrite2(RLY_VALVE4, LOW);
  delay2(3000);
  


  Serial.println();
  
  Serial.println("Fans On");
  digitalWrite2(RLY_FANS, HIGH);
  delay2(2000);
  Serial.println("Fans Off");
  digitalWrite2(RLY_FANS, LOW);
  delay2(3000);


  
  Serial.println();


  Serial.println("Lights On");
  digitalWrite2(RLY_LIGHT, HIGH);
  delay2(2000);
  Serial.println("Lights Off");
  digitalWrite2(RLY_LIGHT, LOW);
  delay2(10000);



//  Serial.println("Test 3");

//  digitalWrite(RLY_PUMP, LOW);
//  digitalWrite(RLY_VALVE1, LOW);
//  digitalWrite(RLY_FANS, LOW);
//  digitalWrite(RLY_LIGHT, LOW);
//  delay(3000);
//  digitalWrite(RLY_PUMP, HIGH);
//  digitalWrite(RLY_VALVE1, HIGH);
//  digitalWrite(RLY_FANS, HIGH);
//  digitalWrite(RLY_LIGHT, HIGH);
//  delay(1000);
}



extern void pinMode2(uint8_t pin, uint8_t mode) {
  if(pin < 16){
    if(mode == SPECIAL){
      GPC(pin) = (GPC(pin) & (0xF << GPCI)); //SOURCE(GPIO) | DRIVER(NORMAL) | INT_TYPE(UNCHANGED) | WAKEUP_ENABLE(DISABLED)
      GPEC = (1 << pin); //Disable
      GPF(pin) = GPFFS(GPFFS_BUS(pin));//Set mode to BUS (RX0, TX0, TX1, SPI, HSPI or CLK depending in the pin)
      if(pin == 3) GPF(pin) |= (1 << GPFPU);//enable pullup on RX
    } else if(mode & FUNCTION_0){
      GPC(pin) = (GPC(pin) & (0xF << GPCI)); //SOURCE(GPIO) | DRIVER(NORMAL) | INT_TYPE(UNCHANGED) | WAKEUP_ENABLE(DISABLED)
      GPEC = (1 << pin); //Disable
      GPF(pin) = GPFFS((mode >> 4) & 0x07);
      if(pin == 13 && mode == FUNCTION_4) GPF(pin) |= (1 << GPFPU);//enable pullup on RX
    }  else if(mode == OUTPUT || mode == OUTPUT_OPEN_DRAIN){
      GPF(pin) = GPFFS(GPFFS_GPIO(pin));//Set mode to GPIO
      GPC(pin) = (GPC(pin) & (0xF << GPCI)); //SOURCE(GPIO) | DRIVER(NORMAL) | INT_TYPE(UNCHANGED) | WAKEUP_ENABLE(DISABLED)
      if(mode == OUTPUT_OPEN_DRAIN) GPC(pin) |= (1 << GPCD);
      GPES = (1 << pin); //Enable
    } else if(mode == INPUT || mode == INPUT_PULLUP){
      GPF(pin) = GPFFS(GPFFS_GPIO(pin));//Set mode to GPIO
      GPEC = (1 << pin); //Disable
      GPC(pin) = (GPC(pin) & (0xF << GPCI)) | (1 << GPCD); //SOURCE(GPIO) | DRIVER(OPEN_DRAIN) | INT_TYPE(UNCHANGED) | WAKEUP_ENABLE(DISABLED)
      if(mode == INPUT_PULLUP) {
          GPF(pin) |= (1 << GPFPU);  // Enable  Pullup
      }
    } else if(mode == WAKEUP_PULLUP || mode == WAKEUP_PULLDOWN){
      GPF(pin) = GPFFS(GPFFS_GPIO(pin));//Set mode to GPIO
      GPEC = (1 << pin); //Disable
      if(mode == WAKEUP_PULLUP) {
          GPF(pin) |= (1 << GPFPU);  // Enable  Pullup
          GPC(pin) = (1 << GPCD) | (4 << GPCI) | (1 << GPCWE); //SOURCE(GPIO) | DRIVER(OPEN_DRAIN) | INT_TYPE(LOW) | WAKEUP_ENABLE(ENABLED)
      } else {
          GPF(pin) |= (1 << GPFPD);  // Enable  Pulldown
          GPC(pin) = (1 << GPCD) | (5 << GPCI) | (1 << GPCWE); //SOURCE(GPIO) | DRIVER(OPEN_DRAIN) | INT_TYPE(HIGH) | WAKEUP_ENABLE(ENABLED)
      }
    }
  } else if(pin == 16){
    GPF16 = GP16FFS(GPFFS_GPIO(pin));//Set mode to GPIO
    GPC16 = 0;
    if(mode == INPUT || mode == INPUT_PULLDOWN_16){
      if(mode == INPUT_PULLDOWN_16){
        GPF16 |= (1 << GP16FPD);//Enable Pulldown
      }
      GP16E &= ~1;
    } else if(mode == OUTPUT){
      GP16E |= 1;
    }
  }
}


void digitalWrite2(uint8_t pin, uint8_t val){
  if(val) gpio_output_set((1 << pin), 0, 0, 0);
  else gpio_output_set(0, (1 << pin), 0, 0);
}


int analogRead2(){
  return system_adc_read();
}

void delay2(int msec){
  int ms = 1000*msec;
  int endTime = system_get_time() + ms;   
  
  while (system_get_time() < endTime){
    ESP.wdtFeed();    
  }
}


int map2(int x, int min1, int max1, int min2, int max2)
{
  return (x - min1)*(max2 - min2)/(max1 - min1) + min2;
}






//  PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO2_U, FUNC_GPIO2);
//  PIN_FUNC_SELECT(PERIPHS_IO_MUX_U0RXD_U, FUNC_GPIO3);
//  PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO4_U, FUNC_GPIO4);
//  PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO5_U, FUNC_GPIO5);
//  PIN_FUNC_SELECT(PERIPHS_IO_MUX_SD_CLK_U, FUNC_GPIO6);
//  PIN_FUNC_SELECT(PERIPHS_IO_MUX_SD_DATA0_U, FUNC_GPIO7);
//  PIN_FUNC_SELECT(PERIPHS_IO_MUX_SD_DATA1_U, FUNC_GPIO8);
//  PIN_FUNC_SELECT(PERIPHS_IO_MUX_SD_DATA2_U, FUNC_GPIO9);
//  PIN_FUNC_SELECT(PERIPHS_IO_MUX_SD_DATA3_U, FUNC_GPIO10);
//  
//  gpio_output_set(0, 0, (1 << RLY_PUMP), 0); 
//  gpio_output_set(0, 0, (1 << RLY_FANS), 0);
//  gpio_output_set(0, 0, (1 << RLY_LIGHT), 0);
//  gpio_output_set(0, 0, (1 << RLY_VALVE1), 0);
//  gpio_output_set(0, 0, (1 << RLY_VALVE2), 0);
//  gpio_output_set(0, 0, (1 << RLY_VALVE3), 0);
//  gpio_output_set(0, 0, (1 << RLY_VALVE4), 0);
//  gpio_output_set(0, 0, (1 << LED_BUILTIN), 0);
